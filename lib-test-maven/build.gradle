apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.novoda.bintray-release'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.novoda:bintray-release:0.9.2'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "7"
targetCompatibility = "7"

configurations {
    deployerJars
}

def siteUrl = 'https://github.com/orgnizationteam/testmaven'
def gitUrl = 'https://github.com/orgnizationteam/testmaven.git'
def licenseName = 'Apache-2.0'
def licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
properties.load(inputStream)
def maven_user = properties.getProperty('maven.user')
def maven_pw = properties.getProperty('maven.pw')
def signingKeyId = properties.getProperty('signing.keyId')
def signingPassword = properties.getProperty('signing.password')
def signingSecretKeyRingFile = properties.getProperty('signing.secretKeyRingFile')
def bintrayUserName = properties.getProperty('bintray.user')
def bintrayRepoName = properties.getProperty('bintray.repo')
def bintrayApiKey = properties.getProperty('bintray.apikey')

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            ext."signing.keyId" = signingKeyId
            ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
            ext."signing.password" = signingPassword
        }
    }
}

signing {
    sign configurations.archives
}

group = "com.github.orgnizationteam"
archivesBaseName = "lib-test-maven"
version = lib_test_maven_version

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            pom.project {
                name 'testmaven'
                packaging 'jar'
                description 'testmaven description'
                url siteUrl

                scm {
                    connection "scm:git:$gitUrl"
                    developerConnection "scm:git:$gitUrl"
                    url siteUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id 'gzqreder'
                        name 'gzqreder'
                        email 'gzqreder@163.com'
                    }
                }
            }

            //提交到远程服务器：
            repository(url: "$maven_url_release") {
                authentication(userName: "$maven_user", password: "$maven_pw")
            }

            // 本地的Maven地址
//             repository(url: uri("../repo"))
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
//    archives jar
    archives javadocJar
    archives sourcesJar
}

publish {
    userOrg = bintrayUserName //bintray注册的用户名
    repoName = bintrayRepoName  //仓库名
    groupId = group
    artifactId = archivesBaseName
    publishVersion = lib_test_maven_version
    desc = 'test jcenter maven'
    website = siteUrl
    licences = ["$licenseName"]
    bintrayUser = bintrayUserName
    bintrayKey = bintrayApiKey
    dryRun = false
}